class Solution {
    int[] visited;
    public List<List<Integer>> permute(int[] nums) {
        int len = nums.length;
        if(len == 0)
            return null;
        List<List<Integer>> res = new LinkedList<>();
        visited = new int [len];
        dfs(res, len, new LinkedList<Integer>(), nums);
        return res;
    }
    private void dfs(List<List<Integer>> res, int len, LinkedList<Integer> cur, int[] nums){
        if(cur.size() == len){
            res.add(new LinkedList<Integer>(cur));
            return;
        }
        for(int i=0; i<len; ++i){
            if(visited[i] == 0){
                visited[i] = 1;
                cur.addLast(nums[i]);
                dfs(res, len, cur, nums);
                cur.removeLast();
                visited[i] = 0;
            }
        }
    }
}