class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(res, candidates, target, new LinkedList<Integer>(), 0);
        return res;
    }
    private void dfs(List<List<Integer>> res, int[] candidates, int target, LinkedList<Integer> cur, int start){
        if(target == 0){
            res.add(new LinkedList<Integer>(cur));
            return;
        }else if(target < 0){
            return;
        }
        for(int i=start; i<candidates.length; ++i){
            cur.addLast(candidates[i]);
            dfs(res, candidates,target-candidates[i],cur,i);
            cur.removeLast();
        }
    }

    // private int sum(List<Integer> list){
    //     int sum = 0;
    //     for(int i:list)
    //         sum+=i;
    //     return sum;
    // }
}