此题直觉就是使用动态规划，因为要求乘积最大的子数组，一开始想的是dp[i][j]，i、j代表一个子数组的左右界，然后寻找状态转移方程。
先说一下初始态吧，初始态就是每一个dp[i][i] = nums[i]，道理很明白就是单个元素的子数组乘积等于其自身。
一开始思考的状态方程是当前dp[i][j]的值是有上一个ij的值乘当前nums i然后比较得出的。
结果证明这样不对，例如（-2，3，-4）这个数组，dp[0][2]时就不是看dp01了，因为dp01为3，
若是只看3的话，那dp02就会是0，但是其实dp应该是24。


思考了题解，首先dp定义我就出错了，应该是dp i 表示已nums i结尾的子数组最大乘积，那为什么我那种定义方法不好呢？
我那种定义方法在计算是还是会有很多重复计算，因为有些dp ij的值是没有必要计算的。比如dp 2 5，如果说dp 1 4就是最大的，
那直接dp 1 5就行了，没必要算dp 2 5。所以dp定义的有问题。
实际上这种dp的定义是一种经验。做多了就会了。
再者，状态转移方程需要注意，这题有点特殊，特殊之处在于，一个正数乘正数（dp中原计划定义为dp i为nums i结尾最大值，为正数），
那确实可以得到此处dp的最大值，若是一个负数，那乘上上一个dp状态的最大值就变成了此处的最小值。
所以这个dp要同时保存在一个状态的最大值和最小值，然后根据每个状态的正负去判断相应的状态转移操作。
大概就是这些要点总结。

